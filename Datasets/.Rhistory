eOutcome1 <- (1-prSpare-prStrike)sum(joint_Propen * S_open)
prSpare <- sum(diag(joint_Pr[,nrow(joint_Pr):1])) - Pr(10)
prStrike <- Pr(10)
eOutcome1 <- (1-prSpare-prStrike) * sum(joint_Propen * S_open)
eOutcome1 <- prSpare * (10 + sum(Pr(Omega)*Omega))
eOutcome3 <- prStrike * (10 + sum(joint_Pr * S) + Pr(10)*(10 + sum(Pr(Omega)*Omega)))
eOutcome1 + eOutcome2 + eOutcome3
prSpare <- sum(diag(joint_Pr[,nrow(joint_Pr):1])) - Pr(10)
prStrike <- Pr(10)
eOutcome1 <- (1-prSpare-prStrike) * sum(joint_Propen * S_open)
eOutcome1 <- prSpare * (10 + sum(Pr(Omega)*Omega))
eOutcome3 <- prStrike * (10 + (1-Pr(10)*sum(joint_Pr * S) + Pr(10)*(10 + sum(Pr(Omega)*Omega)))
eOutcome1 + eOutcome2 + eOutcome3
prSpare <- sum(diag(joint_Pr[,nrow(joint_Pr):1])) - Pr(10)
prStrike <- Pr(10)
eOutcome1 <- (1-prSpare-prStrike) * sum(joint_Propen * S_open)
eOutcome1 <- prSpare * (10 + sum(Pr(Omega)*Omega))
eOutcome3 <- prStrike * (10 + (1-Pr(10))*sum(joint_Pr * S) + Pr(10)*(10 + sum(Pr(Omega)*Omega)))
eOutcome1 + eOutcome2 + eOutcome3
prSpare <- sum(diag(joint_Pr[,nrow(joint_Pr):1])) - Pr(10)
prStrike <- Pr(10)
eOutcome1 <- (1-prSpare-prStrike) * sum(joint_Propen * S_open)
eOutcome1 <- prSpare * (10 + sum(Pr(Omega)*Omega))
#eOutcome3 <- prStrike * (10 + (1-Pr(10))*sum(joint_Pr * S) + Pr(10)*(10 + sum(Pr(Omega)*Omega)))
eOutcome3 <- prStrike * (1-prStrike) * (10+sum(joint_Pr * S)) + prStrike*prStrike(10 + sum(Pr(Omega)*Omega))
prSpare <- sum(diag(joint_Pr[,nrow(joint_Pr):1])) - Pr(10)
prStrike <- Pr(10)
eOutcome1 <- (1-prSpare-prStrike) * sum(joint_Propen * S_open)
eOutcome1 <- prSpare * (10 + sum(Pr(Omega)*Omega))
#eOutcome3 <- prStrike * (10 + (1-Pr(10))*sum(joint_Pr * S) + Pr(10)*(10 + sum(Pr(Omega)*Omega)))
eOutcome3 <- prStrike * (1-prStrike) * (10+sum(joint_Pr * S)) + prStrike*prStrike*(10 + sum(Pr(Omega)*Omega))
eOutcome1 + eOutcome2 + eOutcome3
prSpare <- sum(diag(joint_Pr[,nrow(joint_Pr):1])) - Pr(10)
prStrike <- Pr(10)
eOutcome1 <- (1-prSpare-prStrike) * sum(joint_Propen * S_open)
eOutcome1 <- prSpare * (10 + sum(Pr(Omega)*Omega))
#eOutcome3 <- prStrike * (10 + (1-Pr(10))*sum(joint_Pr * S) + Pr(10)*(10 + sum(Pr(Omega)*Omega)))
eOutcome3 <- prStrike * (1-prStrike) * (10+sum(joint_Pr * S)) + prStrike*prStrike*(10+10 + sum(Pr(Omega)*Omega))
eOutcome1 + eOutcome2 + eOutcome3
(1-prSpare-prStrike)
sum(joint_Propen * S_open)
prSpare
prSpare * (10 + sum(Pr(Omega)*Omega))
sum(Pr(Omega)*Omega)
sum(joint_Pr * S))
sum(joint_Pr * S)
prSpare <- sum(diag(joint_Pr[,nrow(joint_Pr):1])) - Pr(10)
prStrike <- Pr(10)
eOutcome1 <- (1-prSpare-prStrike) * sum(joint_Propen * S_open)
eOutcome1 <- prSpare * (10 + sum(Pr(Omega)*Omega))
eOutcome3 <- (prStrike * (1-prStrike) * (10+sum(joint_Pr * S))) + prStrike*prStrike*(10+10+sum(Pr(Omega)*Omega))
eOutcome1 + eOutcome2 + eOutcome3
Pr(10)
prSpare <- sum(diag(joint_Pr[,nrow(joint_Pr):1])) - Pr(10)
prStrike <- Pr(10)
prOpen <- (1-prSpare-prStrike)
exp_2 <- sum(joint_Pr * S)
exp_1 <- sum(Pr(Omega) * Omega)
exp_2_Open <- sum(joint_Propen * S_open)
tenthFrame <- prOpen * exp_2_Open +
prSpare * (10+exp_2) +
prStrike*(1-prStrike)*(10+exp_2) +
prStrike*prStrike*(10+10+exp_1)
tenthFrame
eTotalGame = 10*tenthFrame
eTotalGame
# computes the x-th Fibonacci number without recursion and with vectorization
F <- function(x) {
stopifnot(is.numeric(x), all(x == as.integer(x)))
sqrt_5 <- sqrt(5) # defined once, used twice
golden_ratio <- (1 + sqrt_5) / 2
return(round(golden_ratio ^ (x + 1) / sqrt_5))
}
# probability of knocking down x out of n pins
Pr <- function(x, n = 10) return(ifelse(x > n, 0, (F(x) ^ 2) / (F(n) * F(n + 1))))
Omega <- 0:10 # 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 is the sample space
round(c(Pr(Omega), total = sum(Pr(Omega))), digits = 3)
joint_Pr <- matrix(0, nrow = 11, ncol = 11)
rownames(joint_Pr) <- colnames(joint_Pr) <- as.character(Omega)
for (x1 in Omega) {
Pr_x1 <- Pr(x1, n = 10)
for (x2 in 0:(10 - x1)) {
joint_Pr[x1 + 1, x2 + 1] <- Pr_x1 * Pr(x2, n = 10 - x1)
}
}
Pr(10)
round(sum(diag(joint_Pr[, nrow(joint_Pr):1]))-Pr(10), digits=3)
round(1 - sum(diag(joint_Pr[, nrow(joint_Pr):1])), digits=3)
Omega_open <- 0:9
joint_Propen <- matrix(0, nrow = 10, ncol = 10)
rownames(joint_Propen) <- colnames(joint_Propen) <- as.character(Omega_open)
for (x1 in 0:9) {
Pr_x1 <- Pr(x1, n = 9)
for (x2 in 0:(9 - x1)) {
joint_Propen[x1 + 1, x2 + 1] <- Pr_x1 * Pr(x2, n = 9 - x1)
}
}
S_open <- row(joint_Propen) - 1 + col(joint_Propen) - 1
sum(joint_Propen * S_open)
prSpare <- sum(diag(joint_Pr[,nrow(joint_Pr):1])) - Pr(10)
prStrike <- Pr(10)
prOpen <- (1-prSpare-prStrike)
exp_2 <- sum(joint_Pr * S)
exp_1 <- sum(Pr(Omega) * Omega)
exp_2_Open <- sum(joint_Propen * S_open)
tenthFrame <- prOpen * exp_2_Open +
prSpare * (10+exp_2) +
prStrike*(1-prStrike)*(10+exp_2) +
prStrike*prStrike*(10+10+exp_1)
tenthFrame
Pr(10)^12
eTotalGame = 10*tenthFrame
eTotalGame
prOutcome1 = dhyper(x=1, m=2, n=40,k=5) * dhyper(x=0, m=2, n=40, k=5)
prOutcome1
prOutcome2 = dhyper(2,2,40,5) * dhyper(0,2,40,5)
prOutcome2
prOutcome3 = dhyper(2,2,40,5) * dhyper(1,2,40,5)
prOutcome3
TotalPr = prOutcome1 + prOutcome2 + prOutcome3
TotalPr
# computes the x-th Fibonacci number without recursion and with vectorization
F <- function(x) {
stopifnot(is.numeric(x), all(x == as.integer(x)))
sqrt_5 <- sqrt(5) # defined once, used twice
golden_ratio <- (1 + sqrt_5) / 2
return(round(golden_ratio ^ (x + 1) / sqrt_5))
}
# probability of knocking down x out of n pins
Pr <- function(x, n = 10) return(ifelse(x > n, 0, (F(x) ^ 2) / (F(n) * F(n + 1))))
Omega <- 0:10 # 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 is the sample space
round(c(Pr(Omega), total = sum(Pr(Omega))), digits = 3)
joint_Pr <- matrix(0, nrow = 11, ncol = 11)
rownames(joint_Pr) <- colnames(joint_Pr) <- as.character(Omega)
for (x1 in Omega) {
Pr_x1 <- Pr(x1, n = 10)
for (x2 in 0:(10 - x1)) {
joint_Pr[x1 + 1, x2 + 1] <- Pr_x1 * Pr(x2, n = 10 - x1)
}
}
Pr(10)
round(sum(diag(joint_Pr[, nrow(joint_Pr):1]))-Pr(10), digits=3)
round(1 - sum(diag(joint_Pr[, nrow(joint_Pr):1])), digits=3)
Omega_open <- 0:9
joint_Propen <- matrix(0, nrow = 10, ncol = 10)
rownames(joint_Propen) <- colnames(joint_Propen) <- as.character(Omega_open)
for (x1 in 0:9) {
Pr_x1 <- Pr(x1, n = 9)
for (x2 in 0:(9 - x1)) {
joint_Propen[x1 + 1, x2 + 1] <- Pr_x1 * Pr(x2, n = 9 - x1)
}
}
S_open <- row(joint_Propen) - 1 + col(joint_Propen) - 1
sum(joint_Propen * S_open)
prSpare <- sum(diag(joint_Pr[,nrow(joint_Pr):1])) - Pr(10)
prStrike <- Pr(10)
prOpen <- (1-prSpare-prStrike)
exp_2 <- sum(joint_Pr * S)
exp_1 <- sum(Pr(Omega) * Omega)
exp_2_Open <- sum(joint_Propen * S_open)
tenthFrame <- prOpen * exp_2_Open +
prSpare * (10+exp_2) +
prStrike*(1-prStrike)*(10+exp_2) +
prStrike*prStrike*(10+10+exp_1)
tenthFrame
Pr(10)^12
eTotalGame = 10*tenthFrame
eTotalGame
prOutcome1 = dhyper(x=1, m=2, n=40,k=5) * dhyper(x=0, m=2, n=40, k=5)
prOutcome1
prOutcome2 = dhyper(2,2,40,5) * dhyper(0,2,40,5)
prOutcome2
prOutcome3 = dhyper(2,2,40,5) * dhyper(1,2,40,5)
prOutcome3
TotalPr = prOutcome1 + prOutcome2 + prOutcome3
TotalPr
prOutcome1 = dhyper(0,2,40,5) * dhyper(0,6,36,5)
prOutcome2 = dhyper(1,2,40,5) * dhyper(0,6,36,5)
prOutcome3 = dhyper(1,2,40,5) * dhyper(1,6,36,5)
prOutcome4 = dhyper(1,2,40,5) * dhyper(1,3,39,5) * dhyper(1,3,39,5)
prOutcome5 = dhyper(2,2,40,5) * dhyper(0,6,36,5)
prOutcome6 = dhyper(2,2,40,5) * dhyper(1,6,36,5)
prOutcome7 = dhyper(2,2,40,5) * dhyper(1,3,39,5) * dhyper(1,3,39,5)
prOutcome8 = dhyper(2,2,40,5) * dhyper(2,6,36,5)
TotalPr = prOutcome1 + prOutcome2 + prOutcome3 + prOutcome4 + prOutcome5 + prOutcome6 + prOutcome7 + prOutcome8
TotalPr
(24/138) * (1-.1776828)
(1-(24/138)) * .1776828
1 - (24/183)
1 - (24/138)
(1 - (24/138)) * .557787
Outcome1 <- dhyper(1,2,40,5) * dhyper(0,1,41,5) * (1-dhyper(3,3,39,5))
Outcome2 <- dhyper(2,2,40,5)
Holzwins <- Outcome1 + Outcome2
Holzwins
Outcome1 <- dhyper(0,2,40,5) * dhyper(0,1,41,5) * (1-(dhyper(2,3,39,5)+dhyper(3,3,39,5)))
Outcome2 <- dhyper(1,1,41,5) * (1-(dhyper(2,2,40,5)+dhyper(3,3,39,5)))
Salomonwins <- Outcome1 + Outcome2
Salomonwins
Outcome1 <- dhyper(2,3,39,5) * (1-(dhyper(1,2,40,5)+dhyper(2,2,40,5))) * dhyper(0,1,39,5)
Outcome2 <- dhyper(3,3,39,5) * (1-dhyper(2,2,40,5))
Kavermanwins <- Outcome1 + Outcome2
Kavermanwins
Prob <- function(stacks){
stacks/sum(stacks)
}
stacks <- stacks <- c(Salomon = 45000000, Holz = 20650000, Bonomo = 51150000, Smith = 19700000)
FirstPlacePr <- Prob(stacks)
SecondPlacePr <- c(0,0,0,0)
ThirdPlacePr <- c(0,0,0,0)
FourthPlacePr <- c(0,0,0,0)
list <- c(1,2,3,4)
for(i in list){
stacks2nd <- stacks
stacks2nd[i] <- 0
SecondPlacePr <- SecondPlacePr + (Prob(stacks2nd)*FirstPlacePr[[i]])
for(j in list[list != i]){
stacks3rd <- stacks2nd
stacks3rd[j] <- 0
ThirdPlacePr <- ThirdPlacePr + Prob(stacks3rd)*FirstPlacePr[[i]]*Prob(stacks2nd)[[j]]
for(k in list[list != c(i,j)]){
stacks4th <- stacks3rd
stacks4th[k] <- 0
FourthPlacePr <- FourthPlacePr + Prob(stacks4th)*FirstPlacePr[[i]]*Prob(stacks2nd)[[j]]*Prob(stacks3rd)[[k]]
}
}
}
PrTable <- rbind(FirstPlacePr,SecondPlacePr,ThirdPlacePr,FourthPlacePr)
Outcomes <- matrix(c(10,6,4,2.84))
Expectedwinnings <- c(Salomon = 0, Holz = 0, Bonomo = 0, Smith = 0)
for(i in 1:4){
Expectedwinnings[[i]] <- sum(Outcomes * PrTable[,i])
}
Expectedwinnings
.2*.7
(.2*.77) + .8*.55
# computes the x-th Fibonacci number without recursion and with vectorization
F <- function(x) {
stopifnot(is.numeric(x), all(x == as.integer(x)))
sqrt_5 <- sqrt(5) # defined once, used twice
golden_ratio <- (1 + sqrt_5) / 2
return(round(golden_ratio ^ (x + 1) / sqrt_5))
}
# probability of knocking down x out of n pins
Pr <- function(x, n = 10) return(ifelse(x > n, 0, (F(x) ^ 2) / (F(n) * F(n + 1))))
Omega <- 0:10 # 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 is the sample space
round(c(Pr(Omega), total = sum(Pr(Omega))), digits = 3)
joint_Pr <- matrix(0, nrow = 11, ncol = 11)
rownames(joint_Pr) <- colnames(joint_Pr) <- as.character(Omega)
for (x1 in Omega) {
Pr_x1 <- Pr(x1, n = 10)
for (x2 in 0:(10 - x1)) {
joint_Pr[x1 + 1, x2 + 1] <- Pr_x1 * Pr(x2, n = 10 - x1)
}
}
Pr(10)
round(sum(diag(joint_Pr[, nrow(joint_Pr):1]))-Pr(10), digits=3)
round(1 - sum(diag(joint_Pr[, nrow(joint_Pr):1])), digits=3)
S <- row(joint_Pr) - 1 + col(joint_Pr) - 1
prSpare <- sum(diag(joint_Pr[,nrow(joint_Pr):1])) - Pr(10)
prStrike <- Pr(10)
prOpen <- (1-prSpare-prStrike)
exp_2 <- sum(joint_Pr * S)
exp_1 <- sum(Pr(Omega) * Omega)
exp_2_Open <- sum(joint_Propen * S_open)
tenthFrame <- prOpen * exp_2_Open +
prSpare * (10+exp_2) +
prStrike*(1-prStrike)*(10+exp_2) +
prStrike*prStrike*(10+10+exp_1)
tenthFrame
.22*.77
# computes the x-th Fibonacci number without recursion and with vectorization
F <- function(x) {
stopifnot(is.numeric(x), all(x == as.integer(x)))
sqrt_5 <- sqrt(5) # defined once, used twice
golden_ratio <- (1 + sqrt_5) / 2
return(round(golden_ratio ^ (x + 1) / sqrt_5))
}
# probability of knocking down x out of n pins
Pr <- function(x, n = 10) return(ifelse(x > n, 0, (F(x) ^ 2) / (F(n) * F(n + 1))))
Omega <- 0:10 # 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 is the sample space
round(c(Pr(Omega), total = sum(Pr(Omega))), digits = 3)
joint_Pr <- matrix(0, nrow = 11, ncol = 11)
rownames(joint_Pr) <- colnames(joint_Pr) <- as.character(Omega)
for (x1 in Omega) {
Pr_x1 <- Pr(x1, n = 10)
for (x2 in 0:(10 - x1)) {
joint_Pr[x1 + 1, x2 + 1] <- Pr_x1 * Pr(x2, n = 10 - x1)
}
}
Pr(10)
round(sum(diag(joint_Pr[, nrow(joint_Pr):1]))-Pr(10), digits=3)
round(1 - sum(diag(joint_Pr[, nrow(joint_Pr):1])), digits=3)
Omega_open <- 0:9
joint_Propen <- matrix(0, nrow = 10, ncol = 10)
rownames(joint_Propen) <- colnames(joint_Propen) <- as.character(Omega_open)
for (x1 in 0:9) {
Pr_x1 <- Pr(x1, n = 9)
for (x2 in 0:(9 - x1)) {
joint_Propen[x1 + 1, x2 + 1] <- Pr_x1 * Pr(x2, n = 9 - x1)
}
}
S_open <- row(joint_Propen) - 1 + col(joint_Propen) - 1
sum(joint_Propen * S_open)
S <- row(joint_Pr) - 1 + col(joint_Pr) - 1
prSpare <- sum(diag(joint_Pr[,nrow(joint_Pr):1])) - Pr(10)
prStrike <- Pr(10)
prOpen <- (1-prSpare-prStrike)
exp_2 <- sum(joint_Pr * S)
exp_1 <- sum(Pr(Omega) * Omega)
exp_2_Open <- sum(joint_Propen * S_open)
tenthFrame <- prOpen * exp_2_Open +
prSpare * (10+exp_2) +
prStrike*(1-prStrike)*(10+exp_2) +
prStrike*prStrike*(10+10+exp_1)
tenthFrame
Pr(10)^12
eTotalGame = 10*tenthFrame
eTotalGame
prOutcome1 = dhyper(x=1, m=2, n=40,k=5) * dhyper(x=0, m=2, n=40, k=5)
prOutcome1
prOutcome2 = dhyper(2,2,40,5) * dhyper(0,2,40,5)
prOutcome2
prOutcome3 = dhyper(2,2,40,5) * dhyper(1,2,40,5)
prOutcome3
TotalPr = prOutcome1 + prOutcome2 + prOutcome3
TotalPr
prOutcome1 = dhyper(0,2,40,5) * dhyper(0,6,36,5)
prOutcome2 = dhyper(1,2,40,5) * dhyper(0,6,36,5)
prOutcome3 = dhyper(1,2,40,5) * dhyper(1,6,36,5)
prOutcome4 = dhyper(1,2,40,5) * dhyper(1,3,39,5) * dhyper(1,3,39,5)
prOutcome5 = dhyper(2,2,40,5) * dhyper(0,6,36,5)
prOutcome6 = dhyper(2,2,40,5) * dhyper(1,6,36,5)
prOutcome7 = dhyper(2,2,40,5) * dhyper(1,3,39,5) * dhyper(1,3,39,5)
prOutcome8 = dhyper(2,2,40,5) * dhyper(2,6,36,5)
TotalPr = prOutcome1 + prOutcome2 + prOutcome3 + prOutcome4 + prOutcome5 + prOutcome6 + prOutcome7 + prOutcome8
TotalPr
Outcome1 <- dhyper(1,2,40,5) * dhyper(0,1,41,5) * (1-dhyper(3,3,39,5))
Outcome2 <- dhyper(2,2,40,5)
Holzwins <- Outcome1 + Outcome2
Holzwins
Outcome1 <- dhyper(0,2,40,5) * dhyper(0,1,41,5) * (1-(dhyper(2,3,39,5)+dhyper(3,3,39,5)))
Outcome2 <- dhyper(1,1,41,5) * (1-(dhyper(2,2,40,5)+dhyper(3,3,39,5)))
Salomonwins <- Outcome1 + Outcome2
Salomonwins
Outcome1 <- dhyper(2,3,39,5) * (1-(dhyper(1,2,40,5)+dhyper(2,2,40,5))) * dhyper(0,1,39,5)
Outcome2 <- dhyper(3,3,39,5) * (1-dhyper(2,2,40,5))
Kavermanwins <- Outcome1 + Outcome2
Kavermanwins
pr1Ag3l <- dhyper(1,3,4,1)
prKavermanNoAK <- 1 - 66/138
pr2acesSolomon <- pr1Ag3l * prKavermanNoAK
pr2acesSolomon
joint_PrTest <- joint_Pr
diag(joint_PrTest[,nrow(joint_PrTest):1]) <- 0
joint_PrTest <- joint_PrTest / sum(joint_PrTest)
sum(joint_PrTest)
View(joint_PrTest)
S <- row(joint_Pr) - 1 + col(joint_Pr) - 1
joint_Propen <- joint_Pr
diag(joint_Propen[,nrow(joint_Propen):1]) <- 0
joint_PrTest <- joint_Propen / sum(joint_Propen)
sum(joint_Propen * S)
S <- row(joint_Pr) - 1 + col(joint_Pr) - 1
joint_Propen <- joint_Pr
diag(joint_Propen[,nrow(joint_Propen):1]) <- 0
joint_Propen <- joint_Propen / sum(joint_Propen)
sum(joint_Propen * S)
S <- row(joint_Pr) - 1 + col(joint_Pr) - 1
prSpare <- sum(diag(joint_Pr[,nrow(joint_Pr):1])) - Pr(10)
prStrike <- Pr(10)
prOpen <- (1-prSpare-prStrike)
exp_2 <- sum(joint_Pr * S)
exp_1 <- sum(Pr(Omega) * Omega)
exp_2_Open <- sum(joint_Propen * S_open)
S <- row(joint_Pr) - 1 + col(joint_Pr) - 1
prSpare <- sum(diag(joint_Pr[,nrow(joint_Pr):1])) - Pr(10)
prStrike <- Pr(10)
prOpen <- (1-prSpare-prStrike)
exp_2 <- sum(joint_Pr * S)
exp_1 <- sum(Pr(Omega) * Omega)
exp_2_Open <- sum(joint_Propen * S)
tenthFrame <- prOpen * exp_2_Open +
prSpare * (10+exp_2) +
prStrike*(1-prStrike)*(10+exp_2) +
prStrike*prStrike*(10+10+exp_1)
tenthFrame
Pr(10)^12
eTotalGame = 10*tenthFrame
eTotalGame
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
pkgbuild::has_build_tools(debug = TRUE)
ECS = - ((3.7 + rnorm(100000000, 0, .2*3.7)) / (-1.6+rnorm(100000000,0, .5*1.6)))
knitr::opts_chunk$set(echo = TRUE)
setwd("~/Desktop/QMSSClasses/Spring Classes/Thesis/Datasets")
library(tidyverse)
Finance_node <- "NCES/Finance/CSV"
Directory_node <- "NCES/Institutional Characteristic/Directory Information"
Fall_node <- "NCES/Institutional Characteristic/Fall Enrollment"
final_node <- as.character(paste(getwd(),Finance_node, sep = "/")) #location of all of the csv files
finance_files <- list.files(path = final_node) #creates a list of all the files in the specified path
path <- as.character(paste(Finance_node,finance_files[[length(finance_files)]], sep = "/")) #1st CSV file location
path <- as.character(paste(Finance_node,finance_files[[length(finance_files)]], sep = "/"))) #1st CSV file location
path <- as.character(paste(Finance_node,finance_files[[length(finance_files)]], sep = "/")) #1st CSV file location
finance_files[[length(finance_files)]]
setwd("~/Desktop/QMSSClasses/Spring Classes/Thesis/Datasets")
library(tidyverse)
Finance_node <- "NCES/Finance/CSV"
Directory_node <- "NCES/Institutional Characteristic/Directory Information"
Fall_node <- "NCES/Institutional Characteristic/Fall Enrollment"
final_node <- as.character(paste(getwd(),Finance_node, sep = "/")) #location of all of the csv files
finance_files <- list.files(path = final_node) #creates a list of all the files in the specified path
final_node
finance_files <- list.files(path = "/Users/Kdavis/Desktop/QMSSClasses/Spring Classes/Thesis/R Files/NCES/Finance/CSV") #creates a list of all the files in the specified path
final_node <- paste(getwd(),Finance_node, sep = "/") #location of all of the csv files
finance_files <- list.files(path = final_node) #creates a list of all the files in the specified path
final_node
final_node <- as.character(paste(getwd(),Finance_node, sep = "/")) #location of all of the csv files
finance_files <- list.files(path = final_node) #creates a list of all the files in the specified path
final_node
class(final_node)
finance_files <- list.files(path = "/Users/Kdavis/Desktop/QMSSClasses/Spring Classes/Thesis/R Files/NCES/Finance/CSV") #creates a list of all the files in the specified path
setwd("~/Desktop/QMSSClasses/Spring Classes/Thesis/Datasets")
library(tidyverse)
getwd()
setwd("~/Desktop/QMSSClasses/Spring Classes/Thesis/Datasets")
getwd()
knitr::opts_chunk$set(echo = TRUE)
setwd("~/Desktop/QMSSClasses/Spring Classes/Thesis/Datasets")
setwd("~/Desktop/QMSSClasses/Spring Classes/Thesis/Datasets")
getwd()
knitr::opts_chunk$set(echo = TRUE)
setwd("~/Desktop/QMSSClasses/Spring Classes/Thesis/Datasets")
library(tidyverse)
getwd()
setwd("~/Desktop/QMSSClasses/Spring Classes/Thesis/Datasets")
library(tidyverse)
getwd()
setwd("~/Desktop/QMSSClasses/Spring Classes/Thesis/Datasets")
getwd()
setwd("~/Desktop/QMSSClasses/Spring Classes/Thesis/Datasets")
library(tidyverse)
Finance_node <- "NCES/Finance/CSV"
Directory_node <- "NCES/Institutional Characteristic/Directory Information"
Fall_node <- "NCES/Institutional Characteristic/Fall Enrollment"
final_node <- as.character(paste(getwd(),Finance_node, sep = "/")) #location of all of the csv files
finance_files <- list.files(path = final_node) #creates a list of all the files in the specified path
path <- as.character(paste(Finance_node,finance_files[[length(finance_files)]], sep = "/")) #1st CSV file location
final_node
knitr::opts_chunk$set(echo = TRUE)
setwd("~/Desktop/QMSSClasses/Spring Classes/Thesis/Datasets")
library(tidyverse)
Finance_node <- "NCES/Finance/CSV"
Directory_node <- "NCES/Institutional Characteristic/Directory Information"
Fall_node <- "NCES/Institutional Characteristic/Fall Enrollment"
final_node <- as.character(paste(getwd(),Finance_node, sep = "/")) #location of all of the csv files
finance_files <- list.files(path = final_node) #creates a list of all the files in the specified path
path <- as.character(paste(Finance_node,finance_files[[length(finance_files)]], sep = "/")) #1st CSV file location
finance_data <- read.csv(path) #create the dataframe
year <- str_extract_all(finance_files[[length(finance_files)]], pattern = "[0-9]{2}") #Years are specified for each file as #### where the first two numbers are last year and third/fourth number are this year.
year <- paste0("20",unlist(year)[[2]]) #set year equal to 20xx
finance_data <- finance_data %>%
mutate(year = year) #create year variable in finance_dataset
colnames(finance_data) <- tolower(colnames(finance_data))
for(i in length(finance_files)-1:1){
path <- as.character(paste(Finance_node,finance_files[[i]], sep = "/"))
placeholder <- read.csv(path) #create the dataframe
year <- str_extract_all(finance_files[[i]], pattern = "[0-9]{2}")
year <- paste0("20",unlist(year)[[2]])
placeholder <- placeholder %>%
mutate(year = year)
colnames(placeholder) <- tolower(colnames(placeholder))
finance_data <- finance_data %>%
plyr::rbind.fill(placeholder)
}
missing_values <- finance_data %>% summarize_all(funs(sum(is.na(.))/n()))
missing_values <- gather(missing_values, key = "feature", value = "missing_pct")
missing_values %>%
filter(missing_pct > 0.03) %>%
ggplot(aes(x=reorder(feature,-missing_pct), y = missing_pct)) +
geom_bar(stat="identity",fill="red")+
coord_flip()+theme_bw()
varlist_path <- paste0(getwd(),"/NCES/Finance/Finance_Varlist.xlsx")
varlist <- readxl::read_xlsx(path = varlist_path)
finance_data <- finance_data %>%
select(c(varlist$varname))
finance_data <- finance_data %>%
select(c(tolower(varlist$varname)))
NCES_varnames <- list(varlist$varname)
finance_data <- finance_data %>%
select(NCES_varnames)
finance_data <- finance_data %>%
select(unlist(NCES_varnames))
NCES_varnames
NCES_varnames <- unlist(list(varlist$varname))
NCES_varnames
c(NCES_varnames)
finance_data <- finance_data %>%
dplyr::select(.dots = varlist$varname)
finance_data <- finance_data %>%
dplyr::select(.dots = tolower(varlist$varname))
NCES_varnames <- c(varlist$varname)
NCES_varnames
NCES_varnames <- c(tolower(varlist$varname))
NCES_varnames
finance_data <- finance_data %>%
dplyr::select(.dots = NCES_varnames)
finance_data <- finance_data %>%
dplyr::select_(.dots = NCES_varnames)
View(finance_data)
